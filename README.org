* FizzBuzz
We have identified the following smells here.
1. Switch Case: Using Polymorphism
2. Null Smell: By eliminating it as it was unnecessary.
3. Inappropriate Naming: Fixed the name of the method ~say()~
4. Duplicate Code Smell: Eliminated switch case duplicate code using polymorphism.

   To handle them, we made the following adjustments.
[[file:FizzBuzz.drawio.png]]
* HTMLEncoder
Here, we have split the original class into two class to follow the Single Responsibility principle. We have used interfaces for more robust structure. The client uses the interface blueprint to access the services.

Aside from that, we have handled the following smells:
1. Blacksheep: FileReading is not part of it.
2. Primitive Obsession: Using primitive iterators(e.g. int i). So we replaced it with for-each.
3. Switch Case: It is a smell but we have decided that it is necessary.
4. Replace temp with query: replacing temporary variables with query in  ~addANewLine()~
5. Oddball smell: the default in switch case had this smell. We made it aligned with others.

[[file:HTMLEncoder.drawio.png]]
* TriviaGame
The following is the class hierarchy for TriviaGame. We have followed the following steps.
1. Extract methods: It was our first step in decoding the problem.
2. Extract Class: It was our second step.
3. Extract Interface: It was our third step.
4. Narrow Interface/Refused Bequest Smell: Narrow down interfaces
5. Try different inheritance style: Tried different styles as can be seen below.
6. Dead Code Smell: Some switch case smells were actually deadcode smells. e.g. RollDice
7. Long Method: There were many long methods.
8. Duplicate code: The famous "vaag" problem.

[[file:TriviaGame.drawio.png]]
